// âœ… ALTERNATIVE verificationService.js
// This version bypasses RPC and generates code in frontend
// Replace /workspace/promohive/src/services/verificationService.js with this:

import { supabase } from '../lib/supabase';

// Generate 5-digit code in frontend
function generateVerificationCode() {
  return Math.floor(10000 + Math.random() * 90000).toString();
}

export const verificationService = {
  // Create and send verification code
  async sendVerificationCode(email, fullName, userId) {
    try {
      // Generate code in frontend
      const verificationCode = generateVerificationCode();
      
      // Calculate expiry (10 minutes from now)
      const expiresAt = new Date(Date.now() + 10 * 60 * 1000).toISOString();
      
      // Mark old codes as verified (invalidate them)
      await supabase
        .from('email_verification_codes')
        .update({ verified: true })
        .eq('user_id', userId)
        .eq('verified', false);
      
      // Insert new code directly into table
      const { error: insertError } = await supabase
        .from('email_verification_codes')
        .insert({
          user_id: userId,
          email: email,
          code: verificationCode,
          expires_at: expiresAt,
          verified: false,
          attempts: 0
        });
      
      if (insertError) {
        throw insertError;
      }

      // Send email via Edge Function
      const { data: emailData, error: emailError } = await supabase.functions.invoke('send-verification-email', {
        body: {
          email,
          verificationCode: verificationCode,
          fullName
        }
      });

      if (emailError) {
        throw emailError;
      }

      return { 
        success: true, 
        message: 'Verification code has been sent to your email',
        data: emailData 
      };
    } catch (error) {
      return { 
        success: false, 
        error: error?.message || 'Failed to send verification code' 
      };
    }
  },

  // Verify email code
  async verifyEmailCode(userId, code) {
    try {
      // Get most recent unverified code
      const { data: codeRecord, error: fetchError } = await supabase
        .from('email_verification_codes')
        .select('*')
        .eq('user_id', userId)
        .eq('verified', false)
        .gt('expires_at', new Date().toISOString())
        .order('created_at', { ascending: false })
        .limit(1)
        .single();
      
      if (fetchError && fetchError.code !== 'PGRST116') {
        throw fetchError;
      }
      
      if (!codeRecord) {
        return { 
          success: false, 
          error: 'No valid verification code found',
          verified: false 
        };
      }
      
      // Increment attempts
      await supabase
        .from('email_verification_codes')
        .update({ attempts: codeRecord.attempts + 1 })
        .eq('id', codeRecord.id);
      
      // Check if code matches and not too many attempts
      if (codeRecord.code === code && codeRecord.attempts < 5) {
        // Mark code as verified
        await supabase
          .from('email_verification_codes')
          .update({ 
            verified: true, 
            verified_at: new Date().toISOString() 
          })
          .eq('id', codeRecord.id);
        
        // Update user profile
        await supabase
          .from('user_profiles')
          .update({ email_verified: true })
          .eq('id', userId);
        
        return { 
          success: true, 
          message: 'Your email has been verified successfully',
          verified: true 
        };
      } else {
        return { 
          success: false, 
          error: 'Verification code is invalid or expired',
          verified: false 
        };
      }
    } catch (error) {
      return { 
        success: false, 
        error: error?.message || 'Failed to verify code',
        verified: false 
      };
    }
  },

  // Get verification status
  async getVerificationStatus(userId) {
    try {
      const { data, error } = await supabase
        .from('user_profiles')
        .select('email_verified, approval_status, status')
        .eq('id', userId)
        .single();

      if (error) {
        throw error;
      }

      return { 
        success: true, 
        data: {
          emailVerified: data?.email_verified || false,
          approvalStatus: data?.approval_status || 'pending',
          userStatus: data?.status || 'pending'
        }
      };
    } catch (error) {
      return { 
        success: false, 
        error: error?.message || 'Failed to fetch verification status' 
      };
    }
  },

  // Get pending verification code for user
  async getPendingVerificationCode(userId) {
    try {
      const { data, error } = await supabase
        .from('email_verification_codes')
        .select('*')
        .eq('user_id', userId)
        .eq('verified', false)
        .gt('expires_at', new Date().toISOString())
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (error && error.code !== 'PGRST116') {
        throw error;
      }

      return { 
        success: true, 
        data: data || null 
      };
    } catch (error) {
      return { 
        success: false, 
        error: error?.message || 'Failed to fetch verification code' 
      };
    }
  },

  // Resend verification code
  async resendVerificationCode(email, fullName, userId) {
    try {
      // Check if user can request new code (rate limiting)
      const { data: recentCode } = await supabase
        .from('email_verification_codes')
        .select('created_at')
        .eq('user_id', userId)
        .gte('created_at', new Date(Date.now() - 60000).toISOString())
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (recentCode) {
        return { 
          success: false, 
          error: 'Please wait one minute before requesting a new code' 
        };
      }

      // Send new verification code
      return await this.sendVerificationCode(email, fullName, userId);
    } catch (error) {
      return { 
        success: false, 
        error: error?.message || 'Failed to resend verification code' 
      };
    }
  }
};

export default verificationService;
